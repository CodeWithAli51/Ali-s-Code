<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript Tutorial</title>
    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f8ff; /* Light blue background */
            display: flex;
            height: 100vh;
            overflow: hidden; /* Prevent body scroll */
        }

        /* Header Styles */
        #header {
            position: fixed;
            top: 0;
            width: 100%;
            background-color: #0077b6; /* Dark blue header */
            color: white;
            text-align: center;
            padding: 15px 0;
            font-size: 24px;
            font-weight: bold;
            z-index: 1000;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        /* Sidebar Styles */
        #sidebar {
            width: 250px;
            background: #ffffff; /* White sidebar */
            padding: 15px;
            height: calc(100vh - 60px); /* Full height minus header */
            position: fixed;
            border-right: 2px solid #0077b6; /* Blue border */
            overflow-y: auto; /* Make sidebar scrollable */
            margin-top: 60px; /* Space for header */
        }

        #sidebar a {
            display: block;
            padding: 10px;
            text-decoration: none;
            color: #0077b6; /* Blue text */
            border-radius: 5px;
            transition: background 0.3s, transform 0.3s;
        }

        #sidebar a:hover {
            background: #caf0f8; /* Light blue hover */
            transform: translateX(10px);
        }

        /* Content Styles */
        #content {
            margin-left: 270px;
            padding: 20px;
            flex: 1;
            margin-top: 60px; /* Space for header */
            overflow-y: auto; /* Make content scrollable */
            height: calc(100vh - 60px); /* Full height minus header */
        }

        .section {
            background: white;
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 5px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
            border-left: 5px solid #0077b6; /* Blue accent border */
        }

        .section.visible {
            opacity: 1;
            transform: translateY(0);
        }

        pre {
            background: #e6f7ff; /* Light blue background for code */
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
            border: 1px solid #0077b6; /* Blue border */
        }

        h2 {
            color: #0077b6; /* Blue headings */
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div id="header">JavaScript Tutorial</div>

    <!-- Sidebar -->
    <div id="sidebar">
        <h3>JavaScript Tutorial</h3>
        <a href="#intro">Introduction</a>
        <a href="#variables">Variables & Data Types</a>
        <a href="#operators">Operators</a>
        <a href="#control">Control Flow</a>
        <a href="#functions">Functions</a>
        <a href="#objects">Objects</a>
        <a href="#arrays">Arrays</a>
        <a href="#dom">DOM Manipulation</a>
        <a href="#events">Events</a>
        <a href="#async">Async Programming</a>
        <a href="#fetch">Fetch API</a>
        <a href="#es6">ES6 Features</a>
        <a href="#modules">Modules</a>
        <a href="#promises">Promises</a>
        <a href="#async-await">Async/Await</a>
    </div>

    <!-- Content -->
    <div id="content">
        <!-- Block 1: Introduction -->
        <div id="intro" class="section">
            <h2>Introduction to JavaScript</h2>
            <p>JavaScript is a high-level, interpreted programming language that is widely used for building dynamic and interactive web applications. It is the core language of the web and runs in the browser.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>Client-Side Scripting:</strong> JavaScript runs in the browser, enabling dynamic content updates without reloading the page.</li>
                <li><strong>Event-Driven:</strong> JavaScript responds to user actions like clicks, mouse movements, and keyboard input.</li>
                <li><strong>Asynchronous:</strong> JavaScript supports asynchronous programming with features like Promises and Async/Await.</li>
                <li><strong>Cross-Platform:</strong> JavaScript can be used for frontend, backend (Node.js), and mobile app development.</li>
            </ul>
            <pre><code>console.log("Hello, World!");</code></pre>
        </div>

        <!-- Block 2: Variables & Data Types -->
        <div id="variables" class="section">
            <h2>Variables & Data Types</h2>
            <p>Variables are used to store data in JavaScript. JavaScript is dynamically typed, meaning you don't need to declare the type of a variable.</p>
            <p><strong>Data Types:</strong></p>
            <ul>
                <li><strong>Primitive Types:</strong> <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>symbol</code>, and <code>bigint</code>.</li>
                <li><strong>Non-Primitive Types:</strong> <code>object</code> (including arrays and functions).</li>
            </ul>
            <pre><code>let name = "John"; // String
let age = 25; // Number
let isStudent = true; // Boolean
let person = { name: "John", age: 25 }; // Object</code></pre>
        </div>

        <!-- Block 3: Operators -->
        <div id="operators" class="section">
            <h2>Operators</h2>
            <p>JavaScript provides various types of operators for performing operations on variables and values.</p>
            <p><strong>Types of Operators:</strong></p>
            <ul>
                <li><strong>Arithmetic Operators:</strong> <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>.</li>
                <li><strong>Comparison Operators:</strong> <code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code>></code>, <code><</code>, <code>>=</code>, <code><=</code>.</li>
                <li><strong>Logical Operators:</strong> <code>&&</code>, <code>||</code>, <code>!</code>.</li>
                <li><strong>Assignment Operators:</strong> <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>.</li>
            </ul>
            <pre><code>let a = 10, b = 5;
let sum = a + b; // Arithmetic
let isEqual = a === b; // Comparison
let result = a > 5 && b < 10; // Logical
a += 5; // Assignment</code></pre>
        </div>

        <!-- Block 4: Control Flow -->
        <div id="control" class="section">
            <h2>Control Flow</h2>
            <p>Control flow statements allow you to control the execution of your program based on conditions or loops.</p>
            <p><strong>Types of Control Flow Statements:</strong></p>
            <ul>
                <li><strong>If-Else:</strong> Executes a block of code if a condition is true.</li>
                <li><strong>Switch:</strong> Executes one of many code blocks based on the value of a variable.</li>
                <li><strong>Loops:</strong> Repeats a block of code while a condition is true (e.g., <code>for</code>, <code>while</code>, <code>do-while</code>).</li>
            </ul>
            <pre><code>let age = 18;
if (age >= 18) {
    console.log("You are an adult.");
} else {
    console.log("You are a minor.");
}</code></pre>
        </div>

        <!-- Block 5: Functions -->
        <div id="functions" class="section">
            <h2>Functions</h2>
            <p>Functions are reusable blocks of code that perform a specific task.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>Function Declaration:</strong> <code>function myFunction() { ... }</code></li>
                <li><strong>Function Expression:</strong> <code>const myFunction = function() { ... }</code></li>
                <li><strong>Arrow Functions:</strong> <code>const myFunction = () => { ... }</code></li>
            </ul>
            <pre><code>function greet(name) {
    return `Hello, ${name}!`;
}

const greetArrow = (name) => `Hello, ${name}!`;</code></pre>
        </div>

        <!-- Block 6: Objects -->
        <div id="objects" class="section">
            <h2>Objects</h2>
            <p>Objects are collections of key-value pairs used to store complex data.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>Object Literal:</strong> <code>{ key: value }</code></li>
                <li><strong>Methods:</strong> Functions inside objects.</li>
                <li><strong>Prototypes:</strong> JavaScript uses prototypes for inheritance.</li>
            </ul>
            <pre><code>const person = {
    name: "John",
    age: 25,
    greet: function() {
        console.log(`Hello, my name is ${this.name}`);
    }
};

person.greet(); // Output: Hello, my name is John</code></pre>
        </div>

        <!-- Block 7: Arrays -->
        <div id="arrays" class="section">
            <h2>Arrays</h2>
            <p>Arrays are used to store multiple values in a single variable.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>Array Methods:</strong> <code>push()</code>, <code>pop()</code>, <code>map()</code>, <code>filter()</code>, <code>reduce()</code>.</li>
                <li><strong>Iteration:</strong> Use loops or methods like <code>forEach()</code> to iterate over arrays.</li>
            </ul>
            <pre><code>const fruits = ["Apple", "Banana", "Orange"];
fruits.push("Mango"); // Add to array
fruits.forEach(fruit => console.log(fruit)); // Iterate</code></pre>
        </div>

        <!-- Block 8: DOM Manipulation -->
        <div id="dom" class="section">
            <h2>DOM Manipulation</h2>
            <p>The Document Object Model (DOM) is a programming interface for HTML and XML documents. JavaScript can manipulate the DOM to dynamically update content.</p>
            <p><strong>Key Methods:</strong></p>
            <ul>
                <li><strong>Select Elements:</strong> <code>document.querySelector()</code>, <code>document.getElementById()</code>.</li>
                <li><strong>Modify Content:</strong> <code>element.innerHTML</code>, <code>element.textContent</code>.</li>
                <li><strong>Event Listeners:</strong> <code>element.addEventListener()</code>.</li>
            </ul>
            <pre><code>document.querySelector("#myButton").addEventListener("click", () => {
    document.querySelector("#output").textContent = "Button clicked!";
});</code></pre>
        </div>

        <!-- Block 9: Events -->
        <div id="events" class="section">
            <h2>Events</h2>
            <p>Events are actions or occurrences that happen in the browser, such as clicks, mouse movements, or key presses.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>Event Listeners:</strong> Attach functions to events.</li>
                <li><strong>Event Types:</strong> <code>click</code>, <code>mouseover</code>, <code>keydown</code>, etc.</li>
            </ul>
            <pre><code>document.querySelector("#myButton").addEventListener("click", () => {
    alert("Button clicked!");
});</code></pre>
        </div>

        <!-- Block 10: Async Programming -->
        <div id="async" class="section">
            <h2>Async Programming</h2>
            <p>JavaScript supports asynchronous programming to handle tasks like network requests without blocking the main thread.</p>
            <p><strong>Key Concepts:</strong></p>
            <ul>
                <li><strong>Callbacks:</strong> Functions passed as arguments to other functions.</li>
                <li><strong>Promises:</strong> Handle asynchronous operations more cleanly.</li>
                <li><strong>Async/Await:</strong> Syntactic sugar for working with Promises.</li>
            </ul>
            <pre><code>// Using Promises
fetch("https://api.example.com/data")
    .then(response => response.json())
    .then(data => console.log(data));</code></pre>
        </div>

        <!-- Block 11: Fetch API -->
        <div id="fetch" class="section">
            <h2>Fetch API</h2>
            <p>The Fetch API is used to make HTTP requests in JavaScript.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>GET Requests:</strong> Fetch data from a server.</li>
                <li><strong>POST Requests:</strong> Send data to a server.</li>
            </ul>
            <pre><code>fetch("https://api.example.com/data")
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error("Error:", error));</code></pre>
        </div>

        <!-- Block 12: ES6 Features -->
        <div id="es6" class="section">
            <h2>ES6 Features</h2>
            <p>ES6 (ECMAScript 2015) introduced many new features to JavaScript, making it more powerful and easier to use.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>let and const:</strong> Block-scoped variable declarations.</li>
                <li><strong>Arrow Functions:</strong> Shorter syntax for writing functions.</li>
                <li><strong>Template Literals:</strong> Embed expressions in strings using backticks.</li>
            </ul>
            <pre><code>const name = "John";
const greeting = `Hello, ${name}!`; // Template Literal
console.log(greeting); // Output: Hello, John!</code></pre>
        </div>

        <!-- Block 13: Modules -->
        <div id="modules" class="section">
            <h2>Modules</h2>
            <p>JavaScript modules allow you to split your code into reusable pieces.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>Export:</strong> Export functions, objects, or values from a module.</li>
                <li><strong>Import:</strong> Import functions, objects, or values into another module.</li>
            </ul>
            <pre><code>// math.js
export function add(a, b) {
    return a + b;
}

// main.js
import { add } from './math.js';
console.log(add(2, 3)); // Output: 5</code></pre>
        </div>

        <!-- Block 14: Promises -->
        <div id="promises" class="section">
            <h2>Promises</h2>
            <p>Promises are used to handle asynchronous operations in JavaScript.</p>
            <p><strong>Key Features:</strong></p>
            <ul>
                <li><strong>States:</strong> Pending, Fulfilled, Rejected.</li>
                <li><strong>Methods:</strong> <code>then()</code>, <code>catch()</code>, <code>finally()</code>.</li>
            </ul>
            <pre><code>const promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("Success!"), 1000);
});

promise.then(result => console.log(result)); // Output: Success!</code></pre>
        </div>

        <!-- Block 15: Async/Await -->
        <div id="async-await" class="section">
            <h2>Async/Await</h2>
            <p>Async/Await provides a cleaner way to work with asynchronous code.</p>
            <pre><code>async function fetchData() {
    try {
        let response = await fetch("https://api.example.com/data");
        let data = await response.json();
        console.log(data);
    } catch (error) {
        console.error("Error:", error);
    }
}

fetchData();</code></pre>
        </div>
    </div>

    <!-- Smooth Scroll Script -->
    <script>
        document.querySelectorAll('#sidebar a').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        // Add animations to sections when they come into view
        const sections = document.querySelectorAll('.section');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
            }
        });
    }, { threshold: 0.1 });

    sections.forEach(section => {
        observer.observe(section);
    });
</script>
</body>
</html>